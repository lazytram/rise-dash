name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:', 'ci:'];

            const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));

            if (!hasValidPrefix) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: `⚠️ **PR Title Format**: Please format your PR title with one of these prefixes:

                - \`feat:\` - New features
                - \`fix:\` - Bug fixes
                - \`docs:\` - Documentation changes
                - \`style:\` - Code style changes (formatting, etc.)
                - \`refactor:\` - Code refactoring
                - \`test:\` - Adding or updating tests
                - \`chore:\` - Maintenance tasks
                - \`ci:\` - CI/CD changes

                Example: \`feat: add new game scoring system\``,
                event: 'REQUEST_CHANGES'
              });

              core.setFailed('PR title does not follow conventional commit format');
            }

      - name: Check for breaking changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const hasBreakingChanges = files.some(file => {
              // Check for potential breaking changes
              return file.filename.includes('package.json') ||
                     file.filename.includes('types/') ||
                     file.filename.includes('src/index.ts') ||
                     (file.status === 'removed' && !file.filename.includes('test'));
            });

            if (hasBreakingChanges) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['breaking-change']
              });
            }

      - name: Run lint check
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Check build
        run: npm run build

      - name: Comment PR status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });

            const prChecks = checkRuns.check_runs.filter(run =>
              run.name.includes('lint') ||
              run.name.includes('test') ||
              run.name.includes('build')
            );

            const allPassed = prChecks.every(check => check.conclusion === 'success');
            const status = allPassed ? '✅ All checks passed!' : '❌ Some checks failed';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## PR Status Check

              ${status}

              **Checks completed:**
              - Linting
              - Tests
              - Build verification

              ${allPassed ? 'This PR is ready for review! 🚀' : 'Please fix the failing checks before review.'}`
            });
